"""rename_organizations_to_teams

Revision ID: 28e9113aacc1
Revises: 8e62b636d0b5
Create Date: 2025-06-04 12:42:52.261172

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '28e9113aacc1'
down_revision: Union[str, None] = '8e62b636d0b5'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # 1. Create new teams table first
    op.create_table('teams',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('slug', sa.String(length=255), nullable=False),
    sa.Column('description', sa.String(length=500), nullable=True),
    sa.Column('is_personal', sa.Boolean(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('plan', sa.String(length=50), nullable=False),
    sa.Column('max_api_keys', sa.Integer(), nullable=False),
    sa.Column('max_members', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_teams_slug'), 'teams', ['slug'], unique=True)
    
    # 2. Create team_members table
    op.create_table('team_members',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('team_id', sa.UUID(), nullable=False),
    sa.Column('role', sa.Enum('OWNER', 'DEVELOPER', 'REPORTER', name='teamrole'), nullable=False),
    sa.Column('invited_by_id', sa.UUID(), nullable=True),
    sa.Column('invited_at', sa.DateTime(), nullable=True),
    sa.Column('joined_at', sa.DateTime(), nullable=True),
    sa.Column('is_default', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['invited_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'team_id', name='uq_user_team')
    )
    
    # 3. Migrate data from organizations to teams (if any exists)
    # This would need to be done manually or with custom SQL
    
    # 4. Update api_keys table
    op.add_column('api_keys', sa.Column('team_id', sa.UUID(), nullable=True))  # Allow NULL initially
    # Update team_id values based on organization_id (would need custom SQL here)
    # For now, we'll make it NOT NULL after data migration
    op.alter_column('api_keys', 'team_id', nullable=False)
    op.drop_constraint('api_keys_organization_id_fkey', 'api_keys', type_='foreignkey')
    op.create_foreign_key(None, 'api_keys', 'teams', ['team_id'], ['id'])
    op.drop_index('idx_api_key_org', table_name='api_keys')
    op.create_index('idx_api_key_team', 'api_keys', ['team_id'], unique=False)
    op.drop_column('api_keys', 'organization_id')
    
    # 5. Update api_usage table
    op.add_column('api_usage', sa.Column('team_id', sa.UUID(), nullable=True))  # Allow NULL initially
    # Update team_id values based on organization_id (would need custom SQL here)
    op.alter_column('api_usage', 'team_id', nullable=False)
    op.drop_constraint('api_usage_organization_id_fkey', 'api_usage', type_='foreignkey')
    op.create_foreign_key(None, 'api_usage', 'teams', ['team_id'], ['id'])
    op.drop_index('idx_usage_org_date', table_name='api_usage')
    op.create_index('idx_usage_team_date', 'api_usage', ['team_id', 'timestamp'], unique=False)
    op.drop_column('api_usage', 'organization_id')
    
    # 6. Update mcp_servers table
    op.add_column('mcp_servers', sa.Column('team_id', sa.UUID(), nullable=True))  # Allow NULL initially
    # Update team_id values based on organization_id (would need custom SQL here)
    op.alter_column('mcp_servers', 'team_id', nullable=False)
    op.drop_constraint('mcp_servers_organization_id_fkey', 'mcp_servers', type_='foreignkey')
    op.create_foreign_key(None, 'mcp_servers', 'teams', ['team_id'], ['id'])
    op.drop_column('mcp_servers', 'organization_id')
    
    # 7. Drop old tables (after all foreign keys are removed)
    op.drop_table('organization_members')
    op.drop_index('ix_organizations_slug', table_name='organizations')
    op.drop_table('organizations')
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('mcp_servers', sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'mcp_servers', type_='foreignkey')
    op.create_foreign_key('mcp_servers_organization_id_fkey', 'mcp_servers', 'organizations', ['organization_id'], ['id'])
    op.drop_column('mcp_servers', 'team_id')
    op.add_column('api_usage', sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'api_usage', type_='foreignkey')
    op.create_foreign_key('api_usage_organization_id_fkey', 'api_usage', 'organizations', ['organization_id'], ['id'])
    op.drop_index('idx_usage_team_date', table_name='api_usage')
    op.create_index('idx_usage_org_date', 'api_usage', ['organization_id', 'timestamp'], unique=False)
    op.drop_column('api_usage', 'team_id')
    op.add_column('api_keys', sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'api_keys', type_='foreignkey')
    op.create_foreign_key('api_keys_organization_id_fkey', 'api_keys', 'organizations', ['organization_id'], ['id'])
    op.drop_index('idx_api_key_team', table_name='api_keys')
    op.create_index('idx_api_key_org', 'api_keys', ['organization_id'], unique=False)
    op.drop_column('api_keys', 'team_id')
    op.create_table('organizations',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('slug', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('is_personal', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('plan', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('max_api_keys', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('max_members', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='organizations_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_organizations_slug', 'organizations', ['slug'], unique=True)
    op.create_table('organization_members',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('role', postgresql.ENUM('OWNER', 'ADMIN', 'MEMBER', 'developer', 'reporter', name='organizationrole'), autoincrement=False, nullable=False),
    sa.Column('invited_by_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('invited_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('joined_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('is_default', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['invited_by_id'], ['users.id'], name='organization_members_invited_by_id_fkey'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name='organization_members_organization_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='organization_members_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='organization_members_pkey'),
    sa.UniqueConstraint('user_id', 'organization_id', name='uq_user_org', postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.drop_table('team_members')
    op.drop_index('ix_teams_slug', table_name='teams')
    op.drop_table('teams')
    # ### end Alembic commands ###
