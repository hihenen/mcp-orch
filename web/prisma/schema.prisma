// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id          String               @id @default(cuid())
  name        String
  slug        String               @unique
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  members     OrganizationMember[]
  apiKeys     ApiKey[]
  usage       ApiUsage[]
  
  @@map("organizations")
}

model User {
  id            String               @id @default(cuid())
  email         String               @unique
  password      String?
  name          String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  memberships   OrganizationMember[]
  sessions      Session[]
  accounts      Account[]
  
  @@map("users")
}

model OrganizationMember {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           String       @default("member") // admin, member
  isDefault      Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@unique([userId, organizationId])
  @@map("organization_members")
}

model ApiKey {
  id             String       @id @default(cuid())
  organizationId String
  name           String
  key            String       @unique
  scopes         String[]     @default([])
  expiresAt      DateTime?
  lastUsedAt     DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  isActive       Boolean      @default(true)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  usage          ApiUsage[]
  
  @@map("api_keys")
}

model ApiUsage {
  id             String       @id @default(cuid())
  organizationId String
  apiKeyId       String?
  endpoint       String
  method         String
  statusCode     Int
  responseTime   Int
  timestamp      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  apiKey         ApiKey?      @relation(fields: [apiKeyId], references: [id], onDelete: SetNull)
  
  @@map("api_usage")
}

// NextAuth.js 모델들
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
