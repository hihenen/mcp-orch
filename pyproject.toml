[project]
name = "mcp-orch"
version = "0.1.0"
description = "MCP Batch Proxy/Orchestration 도구 - 하이브리드 MCP 프록시 및 병렬화 오케스트레이션 도구"
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
keywords = ["mcp", "proxy", "orchestration", "batch", "ai"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
]

dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "aiohttp>=3.9.0",
    "asyncio-mqtt>=0.13.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "python-multipart>=0.0.6",
    "httpx>=0.25.0",
    "typer>=0.9.0",
    "rich>=13.7.0",
    "watchfiles>=0.21.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "sse-starlette>=1.6.0",
    "mcp>=1.9.1",
    "python-dotenv>=1.0.0",
    "asyncpg>=0.29.0",
    "bcrypt>=4.1.2",
    "pyjwt>=2.8.0",
    "greenlet>=2.0.0",
    "psycopg2-binary>=2.9.10",
    "email-validator>=2.2.0",
    "fastmcp>=2.8.0",
    "apscheduler>=3.10.4",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.6.0",
]

llm = [
    # Azure AI Foundry / AWS Bedrock 우선 지원
    "azure-ai-inference>=1.0.0b9",
    "boto3>=1.34.0",
    # 옵션: 다른 LLM 서비스
    "openai>=1.3.0",
    "anthropic>=0.7.0",
]

[project.urls]
Homepage = "https://github.com/your-org/mcp-orch"
Repository = "https://github.com/your-org/mcp-orch"
Documentation = "https://github.com/your-org/mcp-orch/docs"
"Bug Tracker" = "https://github.com/your-org/mcp-orch/issues"

[project.scripts]
mcp-orch = "mcp_orch.cli:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "src/mcp_orch/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/mcp_orch"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["mcp_orch"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
